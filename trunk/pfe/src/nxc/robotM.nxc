#define MAX_BLANC 100
#define MIN_BLANC 49

#define MAX_GRIS 48
#define MIN_GRIS 36

#define MAX_NOIR 35
#define MIN_NOIR 0

#define NOIR 2
#define GRIS 1
#define BLANC 0


task main()
{

int saved_val = 0;
int current_val = 0 ;
int real_val = 0;
bool changed_square = FALSE ;
bool obstacle_mode = FALSE ;
//Modif---------------------
bool found_way = FALSE;
bool turned_to_right = FALSE;

int current_square = 0;

SetSensorLight(IN_3);
SetSensorMode(IN_3,IN_MODE_PCTFULLSCALE);
ResetSensor(IN_3);

SetSensorLowspeed(IN_4);

OnFwd(OUT_AC,40);

  while (TRUE)
  {
  if(current_val == 0)
   TextOut(10,LCD_LINE2,"blanc");
     else {if(current_val == 1)
   TextOut(10,LCD_LINE2,"gris");
     else {if(current_val == 2)
   TextOut(10,LCD_LINE2,"noir");
     else {   TextOut(10,LCD_LINE2,"error");}}}


  while(current_val == saved_val){
	real_val = Sensor(S3);
  if((real_val>=MIN_GRIS) && (real_val<=MAX_GRIS))
    current_val = GRIS;
  else{
    if((real_val>=MIN_BLANC) && (real_val<=MAX_BLANC))
     current_val = BLANC;
     else if((real_val>=MIN_NOIR) && (real_val<=MAX_NOIR))
       current_val = NOIR;
  }
  }

   Wait(100);
	//resolution bug passage de blanc a noir
  OnFwd(OUT_AC,0);
  real_val = Sensor(S3);
  if((real_val>=MIN_GRIS) && (real_val<=MAX_GRIS))
    current_val = GRIS;
  else{
    if((real_val>=MIN_BLANC) && (real_val<=MAX_BLANC))
     current_val = BLANC;
     else if((real_val>=MIN_NOIR) && (real_val<=MAX_NOIR))
       current_val = NOIR;}

OnFwd(OUT_AC,40);


if((current_val == GRIS)){
	current_square = GRIS;
	if(saved_val == BLANC)
    changed_square = TRUE;
}else{
if((current_val == BLANC)){
	current_square = BLANC;
	if(saved_val == GRIS)
		changed_square = TRUE;

}else
     changed_square = FALSE;}


if(obstacle_mode == TRUE)
{
	if(changed_square == TRUE){
		//obstacle_mode = FALSE;
		//Modif---------------------
		found_way = TRUE;
		}
}

if((turned_to_right == TRUE)) //&& (obstacle_mode == FALSE))
   found_way = TRUE;


if(found_way == TRUE){
   //Avance d'une case
   OnFwd(OUT_AC,30);
   Wait(2000);
   OnFwd(OUT_AC,0);
   //Avance l'esclave
   RemoteStartProgram(1,"forward.rxe");
   while(SensorUS(S4) > 10);
   RemoteStopProgram(1);
   Wait(2000);
 if(turned_to_right == TRUE){
   RemoteStartProgram(1,"turnright.rxe");
   Wait(2000);
   RemoteStopProgram(1);
 //Wait(2000);
 }else{
   RemoteStartProgram(1,"turnleft.rxe");
   Wait(2000);
   RemoteStopProgram(1);
  }
  obstacle_mode = FALSE;
  found_way = FALSE;
  turned_to_right = FALSE;
  OnFwd(OUT_AC,40);
  }


if((changed_square == TRUE) && (obstacle_mode == FALSE))
{
 OnFwd(OUT_AC,0);
 RemoteStartProgram(1,"forward.rxe");
 while(SensorUS(S4) > 10);
 RemoteStopProgram(1);
 OnFwd(OUT_AC,40);
}

if((current_val == NOIR)){
	if(obstacle_mode == FALSE){
        TextOut(10,LCD_LINE4,"NOIR 1");
        obstacle_mode = TRUE;
				OnFwd(OUT_AC,0);
        RotateMotorEx(OUT_AC, 30, 180, -100, TRUE, TRUE);
				}
			else{
        turned_to_right = TRUE;
        TextOut(10,LCD_LINE5,"NOIR 2");
        OnFwd(OUT_AC,0);
        RotateMotorEx(OUT_AC, 30, 360, 100, TRUE, TRUE);
        obstacle_mode = FALSE;
        //Modif---------------------


        }
}

OnFwd(OUT_AC,40);
saved_val = current_val;
}

}

