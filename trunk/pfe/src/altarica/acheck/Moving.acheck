with Moving do
 quot() >  '$NODENAME.dot';
 dead := any_s - src(any_t - self_epsilon);
 notCFC := any_t - loop(any_t,any_t);
 movingB := [moving = -1];
 moving0 := [moving = 0];
 moving1 := [moving = 1];
 moving2 := [moving = 2];
 moving3 := [moving = 3];
 motorLB := [LeftWheel.move = -1];
 motorL0 := [LeftWheel.move = 0];
 motorL1 := [LeftWheel.move = 1];
 motorRB := [RightWheel.move = -1];
 motorR0 := [RightWheel.move = 0];
 motorR1 := [RightWheel.move = 1];
 back := label back;
 stop := label stop;
 left := label left;
 forward := label forward;
 right := label right;

 //Situations redoutÃ©es : 
 ERMove := (tgt(back) & not(movingB)) |
       (tgt(stop) & not(moving0)) |
       (tgt(left) & not(moving1)) |
       (tgt(forward) & not(moving2)) |
       (tgt(right) & not(moving3));

 ERWheel := (tgt(back) & (not(motorLB) | not(motorRB))) |
       (tgt(stop) & (not(motorL0) & not(motorR0))) |
       (tgt(left) & (not(motorLB) & not(motorR1))) |
       (tgt(forward) & (not(motorL1) & not(motorR1))) |
       (tgt(right) & (not(motorL1) & not(motorRB)));

 show(all) > '$NODENAME.prop';
 test(dead,0) > '$NODENAME.res';
 test(notCFC,0) >> '$NODENAME.res';
 test(ERMove,0) >> '$NODENAME.res';
 test(ERWheel,0) >> '$NODENAME.res';
done