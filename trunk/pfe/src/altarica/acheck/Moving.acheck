with Moving do
 quot() >  '$NODENAME.dot';
 dead := any_s - src(any_t - self_epsilon);
 notCFC := any_t - loop(any_t,any_t);
 moving0 := [moving = 0];
 moving1 := [moving = 1];
 moving2 := [moving = 2];
 moving3 := [moving = 3];
 moving4 := [moving = 4];
 motorLB := label LeftWheel.back;
 motorL0 := label LeftWheel.stop;
 motorL1 := label LeftWheel.forward;
 motorRB := label RightWheel.back;
 motorR0 := label RightWheel.stop;
 motorR1 := label RightWheel.forward;
 stop := label stop;
 left := label left;
 forward := label forward;
 right := label right;
 halfturn := label halfturn;

 //Situations redoutÃ©es : 
 ERMove := (tgt(stop) & not(moving0)) |
       	   (tgt(left) & not(moving1)) |
       	   (tgt(forward) & not(moving2)) |
       	   (tgt(right) & not(moving3)) |
       	   (tgt(halfturn) & not(moving4));

 ERWheel := (tgt(stop) & (not(tgt(motorL0)) & not(tgt(motorR0)))) |
       	    (tgt(left) & (not(tgt(motorLB)) & not(tgt(motorR1)))) |
       	    (tgt(forward) & (not(tgt(motorL1)) & not(tgt(motorR1)))) |
       	    (tgt(right) & (not(tgt(motorL1)) & not(tgt(motorRB)))) |
	    (tgt(halfturn) & (not(tgt(motorLB)) & not(tgt(motorR1))));

 show(all) > '$NODENAME.prop';
 test(dead,0) > '$NODENAME.res';
 test(notCFC,0) >> '$NODENAME.res';
 test(ERMove,0) >> '$NODENAME.res';
 test(ERWheel,0) >> '$NODENAME.res';
done